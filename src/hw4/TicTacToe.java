package hw4;
/*
 * "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ N*N" –≤ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–º —Å—Ç–∏–ª–µ c –≤—ã–±–æ—Ä–æ–º —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–Ω–∞ —Ö–∞—Ä–¥–µ —è –Ω–µ —Å–º–æ–≥ –µ–≥–æ –≤—ã–π–≥—Ä–∞—Ç—å)
 *
 */

import java.util.Random;
import java.util.Scanner;

public class TicTacToe {
    private static char[][] map;
    private static int SIZE = 3;
    private static boolean EASY_MODE = false;

    private static final char DOT_X = '‚ùå';
    private static final char DOT_O = '‚óØ';
    private static final char DOT_U = '‚¨©';
    private static Scanner scanner = new Scanner(System.in);
    private static Random random = new Random();

    public static void main(String[] args) {
        initMap();
        printMap();

        while (true) {
            humanTurn();

            int result = isGameOver(DOT_X);
            if (result == 1) {  //–µ—Å–ª–∏ DOT_X –ø–æ–±–µ–¥–∏–ª
                System.out.println("Well Done!");
                break;
            } else if (result == 0) {  //–µ—Å–ª–∏ –Ω–∏—á—å—è
                System.out.println("Draw!");
                break;
            }

            computerTurn();

            result = isGameOver(DOT_O);
            if (result == 1) {  //–µ—Å–ª–∏ DOT_X –ø–æ–±–µ–¥–∏–ª
                System.out.println("You Lose!");
                break;
            } else if (result == 0) {  //–µ—Å–ª–∏ –Ω–∏—á—å—è
                System.out.println("Draw!");
                break;
            }

            printMap();
        }

        printMap();
        System.out.println("Game Over!");
    }

    /*
     * –¥–≤–∏–∂–æ–∫ –∏–≥—Ä—ã üòé
     */
    private static void initMap() {
        map = new char[SIZE][SIZE];
        for (int i = 0; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                map[i][j] = DOT_U;
    }

    private static void printMap() {
        for (int i = 1; i < SIZE + 1; i++)
            System.out.print("\t" + i);
        System.out.println();

        for (int i = 0; i < SIZE; i++) {
            System.out.print(i + 1 + "\t");
            for (int j = 0; j < SIZE; j++)
                System.out.print(map[i][j] + "\t");
            System.out.println();
        }
    }

    private static boolean isCellValid(int x, int y) {
        return (x >= 0 && x < SIZE && y >= 0 && y < SIZE && map[x][y] == DOT_U);
    }

    private static void humanTurn() {
        int x, y;
        do {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (—Å—Ç—Ä–æ–∫–∞, –∑–∞—Ç–µ–º —Å—Ç–æ–ª–±–µ—Ü): ");
            x = scanner.nextInt() - 1;
            y = scanner.nextInt() - 1;
            if (!isCellValid(x, y)) {
                printMap();
                System.out.println("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!");
            }
        } while (!isCellValid(x, y));
        map[x][y] = DOT_X;
    }

    private static void computerTurn() {
        int x = -1, y = -1;
        if (EASY_MODE) {
            do {
                x = random.nextInt(SIZE);
                y = random.nextInt(SIZE);
            } while (!isCellValid(x, y));
            System.out.println("–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–∞–ª —è—á–µ–π–∫—É " + (x + 1) + " " + (y + 1));
            map[x][y] = DOT_O;
        } else {
            makeSmartMoveAgainstEnemy(DOT_O, DOT_X);  //—Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞(–≤ –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ —á–µ–ª–æ–≤–µ–∫–∞)
        }
    }

    private static int isGameOver(char –°) {
        return isGameOver(–°, SIZE);
    }

    private static int isGameOver2(char –°, int winStreak) {
        /*
         * –ù–∏—á—å—è -> 0
         * –ò–≥—Ä–æ–∫ —Å —Å–∏–º–≤–æ–ª–æ–º (–°) –ø–æ–±–µ–¥–∏–ª -> 1
         * –ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è -> 2
         */
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–±–µ–¥–∏–ª –ª–∏ C –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ –ª–∏–Ω–∏–π
        int d1 = 0, d2 = 0;  // –û–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ (–°) –≤ —Ä—è–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∏ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö
        for (int i = 0; i < SIZE; i++) {
            if (map[i][i] == –°) d1++;
            else d1 = 0;
            if (map[SIZE - i - 1][i] == –°) d2++;
            else d2 = 0;

            int h = 0, v = 0;  // SIZE —Ä–∞–∑ –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ (–°) –≤ —Ä—è–¥ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == –°) h++;
                else h = 0;
                if (map[j][i] == –°) v++;
                else v = 0;
                if (h == winStreak || v == winStreak)  // –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞ —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è–µ–º—Å—è, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É
                    return 1;
            }
            if (d1 == winStreak || d2 == winStreak)  // –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–≤–æ–ª–∞...
                return 1;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–ª—è, –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
        for (int i = 1; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                if (map[i][j] == DOT_U)
                    return 2;
        return 0;
    }

    private static int isGameOver(char symb, int winStreak) {
        for (int row = 0; row < SIZE - winStreak; row++) {
            for (int col = 0; col < SIZE - winStreak; col++) {
                if (checkDiagonals(symb, row, col, winStreak) || checkLanes(symb, row, col, winStreak)) return 1;
            }
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ–ª—è, –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
        for (int i = 1; i < SIZE; i++)
            for (int j = 0; j < SIZE; j++)
                if (map[i][j] == DOT_U)
                    return 2;
        return 0;
    }

    private static boolean checkDiagonals(char symb, int rowOffset, int colOffset, int winStreak) {
        boolean isD1Win = true, isD2Win = true;
        for (int i = 0; i < winStreak; i++) {
            isD1Win &= (map[i + rowOffset][i + colOffset] == symb);
            isD2Win &= (map[rowOffset + winStreak - i - 1][i + colOffset] == symb);
        }
        return isD1Win || isD2Win;
    }

    private static boolean checkLanes(char symb, int rowOffset, int colOffset, int winStreak) {
        boolean isColWin, isRowWin;
        for (int row = rowOffset; row < winStreak + rowOffset; row++) {
            isColWin = true;
            isRowWin = true;
            for (int col = colOffset; col < winStreak + colOffset; col++) {
                isColWin &= (map[row][col] == symb);  // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
                isRowWin &= (map[col][row] == symb);  // –í–µ—Ä—Ç–∏–∫–∞–ª—å
            }
            if (isColWin || isRowWin) return true;
        }
        return false;
    }

    private static void makeSmartMoveAgainstEnemy(char myC, char enemyC) {  //–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—ã–≥—Ä–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–º myC –ø—Ä–æ—Ç–∏–≤ —Å–∏–º–≤–ª–∞ enemyC (–Ω–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É—è—Å—å —Ç–µ–º, –∫—É–¥–∞ –±—ã–ª —Å–¥–µ–ª–∞–Ω —Ö–æ–¥ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º)
        int weakX = -1, weakY = -1;  //–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ —Ö–æ–¥–∞ (—Å–∞–º–æ–µ —Å–ª–∞–±–æ–µ –º–µ—Å—Ç–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞)
        /*
         * 1) –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—ë –ø–æ–ª–µ. –ï—Å–ª–∏ –º–æ–∂–µ–º –ø–æ–±–µ–¥–∏—Ç—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
         */
        int myd1 = 0, myd2 = 0, d1i = -1, d2i = -1, d2j = -1;  //–æ–¥–∏–Ω —Ä–∞–∑ –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –ù–ê–®–ò–• —è—á–µ–µ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∏ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö
        for (int i = 0; i < SIZE; i++) {
            if (map[i][i] == myC) myd1++;  //–ø–æ–∏—Å–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            else if (isCellValid(i, i)) d1i = i;  //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–µ–º –µ–µ –∑–∞–Ω—è—Ç—å
            if (map[SIZE - i - 1][i] == myC) myd2++;  //–ø–æ–∏—Å–∫ –Ω–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            else if (isCellValid(SIZE - i - 1, i)) {  //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–µ–º –µ–µ –∑–∞–Ω—è—Ç—å
                d2i = SIZE - i - 1;
                d2j = i;
            }

            int myh = 0, myv = 0, hi = -1, hj = -1, vi = -1, vj = -1;  // SIZE —Ä–∞–∑ –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –ù–ê–®–ò–• —è—á–µ–µ–∫ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö
            for (int j = 0; j < SIZE; j++) {
                if (map[i][j] == myC) myh++;
                else if (isCellValid(i, j)) {  //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–µ–º –µ–µ –∑–∞–Ω—è—Ç—å
                    hi = i;
                    hj = j;
                }
                if (map[j][i] == myC) myv++;
                else if (isCellValid(j, i)) {  //–∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —è—á–µ–π–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–æ–∂–µ–º –µ–µ –∑–∞–Ω—è—Ç—å
                    vi = j;
                    vj = i;
                }
            }
            if (myh == SIZE - 1 && hi != -1 && hj != -1) {  //–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–≤–æ–±–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –Ω–∞ –Ω–µ–π –Ω–∞—à–∏
                weakX = hi;
                weakY = hj;
            }
            if (myv == SIZE - 1 && vi != -1 && vj != -1) {  //–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–≤–æ–±–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏ –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –Ω–∞ –Ω–µ–π –Ω–∞—à–∏
                weakX = vi;
                weakY = vj;
            }
        }
        if (myd1 == SIZE - 1 && d1i != -1) {
            weakX = d1i;
            weakY = d1i;
        }
        if (myd2 == SIZE - 1 && d2i != -1 && d2j != -1) {
            weakX = d2i;
            weakY = d2j;
        }

        /*
         * 2) –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç—å –Ω–µ –≤—ã—à–ª–æ, –±—É–¥–µ–º –æ–±–æ—Ä–æ–Ω—è—Ç—å—Å—è
         */
        if (weakX == -1 && weakY == -1) {

            int maxH = 0, maxV = 0;  //–º–∞–∫—Å–∏–º—É–º—ã –∑–∞–Ω—è—Ç—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º —è—á–µ–µ–∫ –≤ –æ–ø–∞—Å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –∏ —Å—Ç–æ–ª–±—Ü–∞—Ö
            //–æ–ø–∞—Å–Ω–æ—Å—Ç—å - —ç—Ç–æ –∫–æ–ª-–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º —è—á–µ–µ–∫ –≤ –ª–∏–Ω–∏–Ω–∏.
            int dangerousH = -1, dangerousV = -1;  //—Å–∞–º–∞—è –æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ —Å—Ç–æ–ª–±–µ—Ü. –£ —á–∏—Ç—ã–≤–∞—Ç—å—Å—è –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –µ—â–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —Å–≤–æ–∏–º —Å–∏–º–≤–æ–ª–æ–º.
            int d1 = 0, d2 = 0;  //–¥–ª—è —Ä–∞—Å—Å—á–µ—Ç–∞ –∫–æ–ª-–≤–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–º —è—á–µ–µ–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –∏ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö
            boolean d1IsDanger = true, d2IsDanger = true;  //–µ—Å–ª–∏ –≤ –ª–∏–Ω–∏–∏ –Ω–∞–π–¥–µ—Ç—Å—è –Ω–∞—à –∑–Ω–∞–∫, —Ç–æ –∏–∑–º–µ–Ω–∏–º –Ω–∞ false
            for (int i = 0; i < SIZE; i++) {
                if (map[i][i] == enemyC) d1++;
                else if (map[i][i] == myC) d1IsDanger = false;
                if (map[SIZE - i - 1][i] == enemyC) d2++;
                else if (map[SIZE - i - 1][i] == myC) d2IsDanger = false;

                int h = 0, v = 0;  // SIZE —Ä–∞–∑ –ø–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–ª-–≤–æ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤ –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –ª–∏–Ω–∏—è—Ö
                boolean hIsDanger = true, vIsDanger = true;
                for (int j = 0; j < SIZE; j++) {  //–ø—Ä–æ–≤–µ—Ä–∏–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –≤ –æ–¥–Ω–æ–º —Ü–∏–∫–ª–µ
                    if (map[i][j] == enemyC) h++;
                    else if (map[i][j] == myC) hIsDanger = false;
                    if (map[j][i] == enemyC) v++;
                    else if (map[j][i] == myC) vIsDanger = false;
                }
                if (h > maxH && hIsDanger) {
                    dangerousH = i;
                    maxH = h;
                }
                if (v > maxV && vIsDanger) {
                    dangerousV = i;
                    maxV = v;
                }
            }
            if (!d1IsDanger) d1 = -1;  //–µ—Å–ª–∏ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–µ –æ–ø–∞—Å–Ω—ã, —Ç–æ –¥–∞–ª—å—à–µ –æ–Ω–∏ –Ω–µ –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è
            if (!d2IsDanger)
                d2 = -1;  //–Ω–µ –∑–∞–±—ã–≤–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –æ–ø–∞—Å–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–µ–π –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–µ–π –Ω–µ –±—ã–ª–æ, —Ç–æ –≤—Å–µ –µ—â–µ dangerousH = -1, dangerousV = -1
            //–µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –æ–ø–∞—Å–Ω–æ–π –ª–∏–Ω–∏–∏, –∑–Ω–∞—á–∏—Ç –ø–æ–ª–µ –ø—É—Å—Ç–æ, —Ç–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ —Å—Ö–æ–¥–∏–º –≤ —Ü–µ–Ω—Ç—Ä
            if (d1 == -1 && d2 == -1 && dangerousH == -1 && dangerousV == -1) {
                weakX = (int) (SIZE / 2);
                weakY = (int) (SIZE / 2);
            }


            //–∑–¥–µ—Å—å –º—ã —É–∂–µ –∏–º–µ–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Å–∞–º–æ–π –æ–ø–∞—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, —Å—Ç–æ–ª–±—Ü–µ –∏ –¥–∏–∞–≥–æ–Ω—è–ª—è—Ö. –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—à–µ–≥–æ —Ö–æ–¥–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º.
            int maxDanger = Math.max(Math.max(maxH, maxV), Math.max(d1, d2));

            if (d1 == maxDanger) {  //–≥–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
                int hm = -1;
                for (int i = 0; i < SIZE; i++) {
                    if (isCellValid(i, i)) {
                        int hn = hindranceToEnemy(i, i, myC);
                        if (hn > hm) {
                            hm = hn;
                            weakX = i;
                            weakY = i;
                        }
                    }
                }
            } else if (d2 == maxDanger) {  //–ø–æ–±–æ—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å
                int hm = -1;
                for (int i = 0; i < SIZE; i++) {
                    int xp = SIZE - 1 - i;
                    if (isCellValid(xp, i)) {
                        int hn = hindranceToEnemy(xp, i, myC);
                        if (hn > hm) {
                            hm = hn;
                            weakX = xp;
                            weakY = i;
                        }
                    }
                }
            } else if (maxH == maxDanger) {  //–æ–ø–∞—Å–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                int hm = -1;
                for (int i = 0; i < SIZE; i++) {
                    if (isCellValid(dangerousH, i)) {
                        int hn = hindranceToEnemy(dangerousH, i, myC);
                        if (hn > hm) {
                            hm = hn;
                            weakX = dangerousH;
                            weakY = i;
                        }
                    }
                }
            } else if (maxV == maxDanger) {  //–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
                int hm = -1;
                for (int i = 0; i < SIZE; i++) {
                    if (isCellValid(i, dangerousV)) {
                        int hn = hindranceToEnemy(i, dangerousV, myC);
                        if (hn > hm) {
                            hm = hn;
                            weakX = i;
                            weakY = dangerousV;
                        }
                    }
                }
            } else
                do {
                    weakX = random.nextInt(SIZE);
                    weakY = random.nextInt(SIZE);
                } while (!isCellValid(weakX, weakY));

        }
        //–≤ –∏—Ç–æ–≥–µ —Ö–æ–¥–∏–º!!!
        map[weakX][weakY] = myC;
        System.out.println("–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–∞–ª —è—á–µ–π–∫—É " + (weakX + 1) + " " + (weakY + 1));  //–æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ —ç—Ç–æ –æ–Ω –ø–æ—Ö–æ–¥–∏–ª, –Ω–æ –º–æ–∂–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–∞—Ä—É –∏–Ω–¥–µ–∫—Å–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã (–µ—Å–ª–∏ —á—Ç–æ, –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –≤ –æ–±—â–µ–º)
    }

    private static int hindranceToEnemy(int x, int y, char myC) {  //–ø—Ä–æ—Å—á–µ—Ç –ø–æ–º–µ—Ö–∏(hindrance) –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã –∑–∞–π–º–µ–º —è—á–µ–π–∫—É
        return hindranceToEnemy(x, y, myC, SIZE);
    }

    private static int hindranceToEnemy(int x, int y, char myC, int winStreak) {  //–ø—Ä–æ—Å—á–µ—Ç –ø–æ–º–µ—Ö–∏(hindrance) –¥–ª—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –º—ã –∑–∞–π–º–µ–º —è—á–µ–π–∫—É
        /*
         * –∑–∞–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–∏ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É (–±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ) -> 0
         * –º—ã –∑–∞—â–∏—Ç–∏–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ª–∏–Ω–∏—é -> 1
         * –∑–∞—â–∏—Ç–∏–º 2 –ª–∏–Ω–∏–∏ -> 2
         * –∑–∞—â–∏—Ç–∏–º 3 –ª–∏–Ω–∏–∏ -> 3
         * –∑–∞—â–∏—Ç–∏–º 4 –ª–∏–Ω–∏–∏ -> 4
         */
        int hDefended = 0, vDefended = 0, d1Defended = 0, d2Defended = 0;
        for (int i = 0; i < SIZE; i++) {
            if (map[x][i] == myC)
                hDefended = 1;
            if (map[i][y] == myC)
                vDefended = 1;
            if (map[i][i] == myC)
                d1Defended = 1;
            if (map[SIZE - 1 - i][i] == myC)
                d2Defended = 1;
        }
        return hDefended + vDefended + d1Defended + d2Defended;
    }

}





